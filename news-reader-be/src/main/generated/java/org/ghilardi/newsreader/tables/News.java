/*
 * This file is generated by jOOQ.
 */
package org.ghilardi.newsreader.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.ghilardi.newsreader.DefaultSchema;
import org.ghilardi.newsreader.Indexes;
import org.ghilardi.newsreader.Keys;
import org.ghilardi.newsreader.tables.records.NewsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class News extends TableImpl<NewsRecord> {

    private static final long serialVersionUID = -593606354;

    /**
     * The reference instance of <code>NEWS</code>
     */
    public static final News NEWS = new News();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewsRecord> getRecordType() {
        return NewsRecord.class;
    }

    /**
     * The column <code>NEWS.ID</code>.
     */
    public final TableField<NewsRecord, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>NEWS.AUTHOR</code>.
     */
    public final TableField<NewsRecord, String> AUTHOR = createField("AUTHOR", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>NEWS.AUTHOR_FULL_NAME</code>.
     */
    public final TableField<NewsRecord, String> AUTHOR_FULL_NAME = createField("AUTHOR_FULL_NAME", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>NEWS.TITLE</code>.
     */
    public final TableField<NewsRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>NEWS.DOWNS</code>.
     */
    public final TableField<NewsRecord, Integer> DOWNS = createField("DOWNS", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>NEWS.UPS</code>.
     */
    public final TableField<NewsRecord, Integer> UPS = createField("UPS", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>NEWS.SCORE</code>.
     */
    public final TableField<NewsRecord, Integer> SCORE = createField("SCORE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>NEWS.THUMBNAIL</code>.
     */
    public final TableField<NewsRecord, String> THUMBNAIL = createField("THUMBNAIL", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>NEWS.EDITED</code>.
     */
    public final TableField<NewsRecord, Boolean> EDITED = createField("EDITED", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>NEWS.OVER_18</code>.
     */
    public final TableField<NewsRecord, Boolean> OVER_18 = createField("OVER_18", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>NEWS.NUM_COMMENTS</code>.
     */
    public final TableField<NewsRecord, Integer> NUM_COMMENTS = createField("NUM_COMMENTS", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>NEWS.URL</code>.
     */
    public final TableField<NewsRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>NEWS.CREATED</code>.
     */
    public final TableField<NewsRecord, LocalDateTime> CREATED = createField("CREATED", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>NEWS.IS_VIDEO</code>.
     */
    public final TableField<NewsRecord, Boolean> IS_VIDEO = createField("IS_VIDEO", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>NEWS</code> table reference
     */
    public News() {
        this(DSL.name("NEWS"), null);
    }

    /**
     * Create an aliased <code>NEWS</code> table reference
     */
    public News(String alias) {
        this(DSL.name(alias), NEWS);
    }

    /**
     * Create an aliased <code>NEWS</code> table reference
     */
    public News(Name alias) {
        this(alias, NEWS);
    }

    private News(Name alias, Table<NewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private News(Name alias, Table<NewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> News(Table<O> child, ForeignKey<O, NewsRecord> key) {
        super(child, key, NEWS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NewsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NewsRecord>> getKeys() {
        return Arrays.<UniqueKey<NewsRecord>>asList(Keys.CONSTRAINT_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public News as(String alias) {
        return new News(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public News as(Name alias) {
        return new News(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public News rename(String name) {
        return new News(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public News rename(Name name) {
        return new News(name, null);
    }
}
